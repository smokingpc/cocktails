#include "Common.h"
using namespace std;

static const std::map<OPAL_UID_TAG, list<BYTE>> INVOKE_UID_MAP = 
{
    //{SESSION_MGMT,      { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff }},

    // UID of Users 
    {SESSION_MGR,      { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff }},
    {THISSP,            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }},
    {ADMINSP,           { 0x00, 0x00, 0x02, 0x05, 0x00, 0x00, 0x00, 0x01 }},
    {LOCKINGSP,         { 0x00, 0x00, 0x02, 0x05, 0x00, 0x00, 0x00, 0x02 }},
    {ENT_LOCKINGSP,     { 0x00, 0x00, 0x02, 0x05, 0x00, 0x01, 0x00, 0x01 }},
    {ANYBODY,           { 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01 }},
    {SECURITY_ID,               { 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x06 }},
    {ADMIN1,            { 0x00, 0x00, 0x00, 0x09, 0x00, 0x01, 0x00, 0x01 }},
    {USER1,             { 0x00, 0x00, 0x00, 0x09, 0x00, 0x03, 0x00, 0x01 }},
    {USER2,             { 0x00, 0x00, 0x00, 0x09, 0x00, 0x03, 0x00, 0x02 }},
    {PSID_USER,              { 0x00, 0x00, 0x00, 0x09, 0x00, 0x01, 0xff, 0x01 }},
    {ENT_BANDMASTER0,   { 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x80, 0x01 }},
    {ENT_ERASEMASTER,   { 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x84, 0x01 }},

    //UID of Tables
    {LOCKRANGE_GLOBAL,  { 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x00, 0x01 }},
    {LOCKRANGE_ACE_READDLOCK,   { 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0xE0, 0x01 }},
    {LOCKRANGE_ACE_WRITELOCK,   { 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0xE8, 0x01 }},
    {LOCKRANGE_GLOBAL_ACE_READLOCK,     { 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0xE0, 0x00 }},
    {LOCKRANGE_GLOBAL_ACE_WRITELOCK,    { 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0xE8, 0x00 }},
    {MBRCONTROL_SET_DONE_TO_DOR,        { 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0xF8, 0x01 }},
    {MBR_CONTROL,       { 0x00, 0x00, 0x08, 0x03, 0x00, 0x00, 0x00, 0x01 }},

    {SHADOW_MBR,        { 0x00, 0x00, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00 }},
    {AUTHORITY_TABLE,   { 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00}},
    {C_PIN_TABLE,       { 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00}},
    {OPAL_LOCKING_INFO_TABLE,   { 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x00, 0x01 }},
    {ENT_LOCKING_INFO_TABLE,    { 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00 }},

    //C_PIN_TABLE object ID's
    {C_PIN_MSID, { 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x84, 0x02}}, //< C_PIN_MSID
    {C_PIN_SID, { 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x01}}, //< C_PIN_SID
    {C_PIN_ADMIN1, { 0x00, 0x00, 0x00, 0x0B, 0x00, 0x01, 0x00, 0x01}}, //< C_PIN_ADMIN1
    //half UID's (only first 4 bytes used)
    {HALF_UID_AUTHORITY_OBJ_REF, { 0x00, 0x00, 0x0C, 0x05, 0xff, 0xff, 0xff, 0xff }}, // Half-UID - Authority_object_ref
    {HALF_UID_BOOLEAN_ACE, { 0x00, 0x00, 0x04, 0x0E, 0xff, 0xff, 0xff, 0xff }}, // Half-UID - Boolean ACE

    // special value for omitted optional parameter
    {HEXFF_OMITTER, { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}}, //< HEXFF for omitted
};

static const std::map<OPAL_METHOD_TAG, list<BYTE>> METHOD_UID_MAP =
{
    {PROPERTIES, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x01}}, /**< Properties */
    {STARTSESSION,{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x02}}, /**<STARTSESSION */
    {REVERT,{ 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x02, 0x02}}, /**< Revert */
    {ACTIVATE,{ 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x02, 0x03}}, /**< Activate */
    {EGET,{ 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06 }}, /**< Enterprise Get */
    {ESET,{ 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x07 }}, /**< Enterprise Set */
    {NEXT,{ 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x08}}, /**< NEXT */
    {EAUTHENTICATE,{ 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0c }}, /**< Enterprise Authenticate */
    {GETACL,{ 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0d}}, /**< GetACL */
    {GENKEY,{ 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x10}}, /**< GenKey */
    {REVERTSP,{ 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x11}}, /**< revertSP */
    {GET,{ 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x16}}, /**<Get */
    {SET,{ 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x17}}, /**< Set */
    {AUTHENTICATE,{ 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x1c}}, /**< Authenticate */
    {RANDOM,{ 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x06, 0x01}}, /**< Random */
    {ERASE,{ 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x08, 0x03 }}, /**< Erase */
};

COpalCommand::COpalCommand()
{}
COpalCommand::COpalCommand(UINT32 tsn, UINT32 hsn)
{
    Packet.SetTSN(tsn);
    Packet.SetHSN(hsn);
}
COpalCommand::~COpalCommand()
{}


void COpalCommand::BeginList(){}
void COpalCommand::EndList() {}
void COpalCommand::PushKeypair(char* name, int strlen, UINT8 value) {}
void COpalCommand::PushKeypair(char* name, int strlen, UINT16 value) {}
void COpalCommand::PushKeypair(char* name, int strlen, UINT32 value) {}
void COpalCommand::PushKeypair(char* name, int strlen, UINT64 value) {}
void COpalCommand::PushString(char* str, int strlen) {}
void COpalCommand::PushBytes(BYTE* blob, int bloblen) {}


void COpalCommand::UpdatePacketLength()
{
//todo: calculate correct padding...
    SubPacket.SetLength((UINT32)Payload.size());
    Packet.SetLength((UINT32)(sizeof(OPAL_DATA_SUB_PACKET) + Payload.size() + Padding.size()));
    ComPacket.SetLength((UINT32)(sizeof(OPAL_PACKET) + Packet.GetLength()));
}
